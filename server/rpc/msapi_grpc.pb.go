// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaApiClient is the client API for MediaApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaApiClient interface {
	PrepareMediaStream(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*MediaStream, error)
	ExecuteAction(ctx context.Context, in *MediaAction, opts ...grpc.CallOption) (*MediaActionResult, error)
}

type mediaApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaApiClient(cc grpc.ClientConnInterface) MediaApiClient {
	return &mediaApiClient{cc}
}

func (c *mediaApiClient) PrepareMediaStream(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*MediaStream, error) {
	out := new(MediaStream)
	err := c.cc.Invoke(ctx, "/rpc.MediaApi/PrepareMediaStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaApiClient) ExecuteAction(ctx context.Context, in *MediaAction, opts ...grpc.CallOption) (*MediaActionResult, error) {
	out := new(MediaActionResult)
	err := c.cc.Invoke(ctx, "/rpc.MediaApi/ExecuteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaApiServer is the server API for MediaApi service.
// All implementations must embed UnimplementedMediaApiServer
// for forward compatibility
type MediaApiServer interface {
	PrepareMediaStream(context.Context, *Peer) (*MediaStream, error)
	ExecuteAction(context.Context, *MediaAction) (*MediaActionResult, error)
	mustEmbedUnimplementedMediaApiServer()
}

// UnimplementedMediaApiServer must be embedded to have forward compatible implementations.
type UnimplementedMediaApiServer struct {
}

func (UnimplementedMediaApiServer) PrepareMediaStream(context.Context, *Peer) (*MediaStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareMediaStream not implemented")
}
func (UnimplementedMediaApiServer) ExecuteAction(context.Context, *MediaAction) (*MediaActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (UnimplementedMediaApiServer) mustEmbedUnimplementedMediaApiServer() {}

// UnsafeMediaApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaApiServer will
// result in compilation errors.
type UnsafeMediaApiServer interface {
	mustEmbedUnimplementedMediaApiServer()
}

func RegisterMediaApiServer(s grpc.ServiceRegistrar, srv MediaApiServer) {
	s.RegisterService(&MediaApi_ServiceDesc, srv)
}

func _MediaApi_PrepareMediaStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaApiServer).PrepareMediaStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MediaApi/PrepareMediaStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaApiServer).PrepareMediaStream(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaApi_ExecuteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaApiServer).ExecuteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MediaApi/ExecuteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaApiServer).ExecuteAction(ctx, req.(*MediaAction))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaApi_ServiceDesc is the grpc.ServiceDesc for MediaApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MediaApi",
	HandlerType: (*MediaApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareMediaStream",
			Handler:    _MediaApi_PrepareMediaStream_Handler,
		},
		{
			MethodName: "ExecuteAction",
			Handler:    _MediaApi_ExecuteAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msapi.proto",
}
