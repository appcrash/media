syntax = "proto3";

package rpc;

option go_package = "github.com/appcrash/media/server/rpc";

enum CodecType {
  RAW = 0;     // raw data
  PCM_ALAW = 1;
  AMRNB = 2;
  AMRWB = 3;
}

message MediaParam {
  string peer_ip = 1;                // remote rtp ip
  uint32 peer_port = 2;              // remote rtp port
  uint32 payload_dynamic_type = 3;   // negotiated payload type, dynamic(96 ~ 127), fixed type will ignore this
  CodecType payload_codec_type = 4;  // used to identify mime type, like "AMR","PCMA"
  CodecType record_type = 5;         // codec used to record file
  string record_file = 6;            // empty if needs not recording
}

message SessionParam {
  string session_id = 1;
}

message SessionStatus {
  string status = 1;
}

message MediaStream {
  string stream_id = 1;
  string local_ip = 2;
  uint32 local_rtp_port = 3;
  string peer_ip = 4 ;
  uint32 peer_rtp_port = 5;
}

message MediaAction {
  string stream_id = 1;
  string cmd = 2;
  string cmd_arg = 3;
}

message MediaActionResult {
  string stream_id = 1;
  string state = 2;
}

message MediaActionEvent {
  string stream_id = 1;
  string event = 2;
}


service MediaApi {
  rpc PrepareMediaStream(MediaParam) returns (MediaStream) {}
  rpc StartSession(SessionParam) returns (SessionStatus) {}
  rpc StopSession(SessionParam) returns (SessionStatus) {}
  rpc ExecuteAction(MediaAction) returns (MediaActionResult) {}
  rpc ExecuteActionWithNotify(MediaAction) returns (stream MediaActionEvent) {}
}
