// Code generated by gentrait; DO NOT EDIT.
package comp

import "github.com/appcrash/media/server/event"

func initNodeTraits() {
	RegisterNodeTrait(
		NT[ChanSink]("chan_sink", newChanSink),
		NT[ChanSrc]("chan_src", newChanSrc),
		NT[Pubsub]("pubsub", newPubsub),
		NT[RtpSink]("rtp_sink", newRtpSink),
		NT[RtpSrc]("rtp_src", newRtpSrc),
	)
}

func (n *ChanSink) configHandler() {
	n.SetMessageHandler(MtRawByte, func(_ MessageHandler) MessageHandler { return n._convertRawByteMessage })
	n.SetMessageHandler(MtChannelLinkRequest, func(_ MessageHandler) MessageHandler { return n._convertChannelLinkRequestMessage })
}

func (n *ChanSink) _convertRawByteMessage(evt *event.Event) {
	if msg, ok := EventToMessage[*RawByteMessage](evt); ok {
		n.handleRawByte(msg)
	}
}

func (n *ChanSink) _convertChannelLinkRequestMessage(evt *event.Event) {
	if msg, ok := EventToMessage[*ChannelLinkRequestMessage](evt); ok {
		n.handleChannelLink(msg)
	}
}

func (n *ChanSink) Accept() []MessageType {
	return []MessageType{
		MtRawByte,
		MtChannelLinkRequest,
	}
}

func (n *ChanSrc) configHandler() {
	n.SetMessageHandler(MtChannelLinkRequest, func(_ MessageHandler) MessageHandler { return n._convertChannelLinkRequestMessage })
}

func (n *ChanSrc) _convertChannelLinkRequestMessage(evt *event.Event) {
	if msg, ok := EventToMessage[*ChannelLinkRequestMessage](evt); ok {
		n.handleChannelLink(msg)
	}
}

func (n *ChanSrc) Accept() []MessageType {
	return []MessageType{
		MtChannelLinkRequest,
	}
}

func (n *Pubsub) configHandler() {
	n.SetMessageHandler(MtLinkPointRequest, func(_ MessageHandler) MessageHandler { return n._convertLinkPointRequestMessage })
}

func (n *Pubsub) _convertLinkPointRequestMessage(evt *event.Event) {
	if msg, ok := EventToMessage[*LinkPointRequestMessage](evt); ok {
		n.handleLinkPoint(msg)
	}
}

func (n *Pubsub) Accept() []MessageType {
	return []MessageType{
		MtLinkPointRequest,
	}
}

func (n *RtpSink) configHandler() {
	n.SetMessageHandler(MtRtpPacket, func(_ MessageHandler) MessageHandler { return n._convertRtpPacketMessage })
}

func (n *RtpSink) _convertRtpPacketMessage(evt *event.Event) {
	if msg, ok := EventToMessage[*RtpPacketMessage](evt); ok {
		n.handleRtpPacket(msg)
	}
}

func (n *RtpSink) Accept() []MessageType {
	return []MessageType{
		MtRtpPacket,
	}
}

// Node Factory Method Begin

func newChanSink() SessionAware {
	var exist bool
	node := &ChanSink{}
	if node.Trait, exist = NodeTraitOfType("chan_sink"); !exist {
		panic("node type ChanSink not exist")
	}
	node.configHandler()
	return node
}

func newChanSrc() SessionAware {
	var exist bool
	node := &ChanSrc{}
	if node.Trait, exist = NodeTraitOfType("chan_src"); !exist {
		panic("node type ChanSrc not exist")
	}
	node.configHandler()
	return node
}

func newPubsub() SessionAware {
	var exist bool
	node := &Pubsub{}
	if node.Trait, exist = NodeTraitOfType("pubsub"); !exist {
		panic("node type Pubsub not exist")
	}
	node.configHandler()
	return node
}

func newRtpSink() SessionAware {
	var exist bool
	node := &RtpSink{}
	if node.Trait, exist = NodeTraitOfType("rtp_sink"); !exist {
		panic("node type RtpSink not exist")
	}
	node.configHandler()
	return node
}

func newRtpSrc() SessionAware {
	var exist bool
	node := &RtpSrc{}
	if node.Trait, exist = NodeTraitOfType("rtp_src"); !exist {
		panic("node type RtpSrc not exist")
	}

	return node
}

// Node Factory Method End

func initNode() {
	initNodeTraits()
}
